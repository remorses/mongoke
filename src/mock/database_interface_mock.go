// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/remorses/mongoke/src"
	"sync"
)

var (
	lockDatabaseInterfaceMockFindMany sync.RWMutex
)

// Ensure, that DatabaseInterfaceMock does implement mongoke.DatabaseInterface.
// If this is not the case, regenerate this file with moq.
var _ mongoke.DatabaseInterface = &DatabaseInterfaceMock{}

// DatabaseInterfaceMock is a mock implementation of mongoke.DatabaseInterface.
//
//     func TestSomethingThatUsesDatabaseInterface(t *testing.T) {
//
//         // make and configure a mocked mongoke.DatabaseInterface
//         mockedDatabaseInterface := &DatabaseInterfaceMock{
//             FindManyFunc: func(ctx context.Context, p mongoke.FindManyParams) ([]mongoke.Map, error) {
// 	               panic("mock out the FindMany method")
//             },
//         }
//
//         // use mockedDatabaseInterface in code that requires mongoke.DatabaseInterface
//         // and then make assertions.
//
//     }
type DatabaseInterfaceMock struct {
	// FindManyFunc mocks the FindMany method.
	FindManyFunc func(ctx context.Context, p mongoke.FindManyParams) ([]mongoke.Map, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindMany holds details about calls to the FindMany method.
		FindMany []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P mongoke.FindManyParams
		}
	}
}

// FindMany calls FindManyFunc.
func (mock *DatabaseInterfaceMock) FindMany(ctx context.Context, p mongoke.FindManyParams) ([]mongoke.Map, error) {
	if mock.FindManyFunc == nil {
		panic("DatabaseInterfaceMock.FindManyFunc: method is nil but DatabaseInterface.FindMany was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   mongoke.FindManyParams
	}{
		Ctx: ctx,
		P:   p,
	}
	lockDatabaseInterfaceMockFindMany.Lock()
	mock.calls.FindMany = append(mock.calls.FindMany, callInfo)
	lockDatabaseInterfaceMockFindMany.Unlock()
	return mock.FindManyFunc(ctx, p)
}

// FindManyCalls gets all the calls that were made to FindMany.
// Check the length with:
//     len(mockedDatabaseInterface.FindManyCalls())
func (mock *DatabaseInterfaceMock) FindManyCalls() []struct {
	Ctx context.Context
	P   mongoke.FindManyParams
} {
	var calls []struct {
		Ctx context.Context
		P   mongoke.FindManyParams
	}
	lockDatabaseInterfaceMockFindMany.RLock()
	calls = mock.calls.FindMany
	lockDatabaseInterfaceMockFindMany.RUnlock()
	return calls
}
